// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER 
  CLIENT
}

model User {
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  email String? @unique
  hashedPassword String?
  role Role @default(USER)
}

model Customer {
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  email String? @unique
  hashedPassword String?
  orders Order[]
  role Role @default(CLIENT)
}

model Book {
  id Int @id @default(autoincrement())
  title String
  author Author[]
  description String
  categories Category[]
  publisher String
  publication Int
  price Float
  quantity Int
  selled Int
}

model Category {
  id Int @id @default(autoincrement())
  name String
  books Book[]
}

model Order{
  id Int @id @default(autoincrement())
  customer Customer @relation(fields: [customerId], references: [id])
  customerId Int
  amount Float
  currency String
  status String
  deliveryStatus String?
  createDate DateTime @default(now())
  paymentIntentId String @unique
  products CartProductType[]
  address Address?
}

model CartProductType {
  id Int @id @default(autoincrement())
  name String
  description String
  category String
  brand String
  selectedImg String
  quantity Int
  price Float
  image String
  orders Order[]
}

model Address {
  id Int @id @default(autoincrement())
  city String
  country String
  line1 String
  line2 String?
  postal_code String
  state String
  orders Order @relation(fields: [orderId], references: [id])
  orderId Int @unique
}

model Author {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  books Book[]
}
